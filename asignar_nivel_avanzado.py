import time
import logging
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium_manager import tomar_screenshot

def asignar_nivel_avanzado(driver, correo, nivel):
    """
    Asigna un nivel avanzado en Campus Virtual navegando desde el panel principal hasta la secci√≥n de Cohortes.
    """
    try:
        logging.info(f"üìå Iniciando asignaci√≥n avanzada para {correo} en nivel {nivel}.")

        if not driver:
            raise Exception("‚ùå WebDriver no disponible.")

        # üîπ Navegar desde el panel principal
        logging.info("üåç Accediendo al panel principal...")
        driver.get("https://campusvirtual.bestwork.cl/my/")

        # üîπ Acceder a Administraci√≥n del sitio
        logging.info("üìÇ Accediendo a Administraci√≥n del sitio...")
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.LINK_TEXT, "Administraci√≥n del sitio"))
        ).click()

        # üîπ Ir a la pesta√±a Usuarios
        logging.info("üë• Cambiando a la secci√≥n Usuarios...")
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.LINK_TEXT, "Usuarios"))
        ).click()

        # üîπ Ir a Cohortes
        logging.info("üìÇ Accediendo a Cohortes...")
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.LINK_TEXT, "Cohortes"))
        ).click()

        results = []

        for week in range(1, 13):  # üîπ Iterar de Week 01 a Week 12
            week_str = f"{nivel} Week {week:02d}"
            logging.info(f"üîé Buscando nivel: {week_str}")

            try:
                search_input = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "input[name='search']"))
                )
                search_input.clear()
                search_input.send_keys(week_str)

                search_button = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "button.btn-submit.search-icon"))
                )
                search_button.click()

                cohort_icon = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "i.icon.fa.fa-users"))
                )
                cohort_icon.click()

                email_input = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.ID, "addselect_searchtext"))
                )
                email_input.clear()
                email_input.send_keys(correo)

                # üîπ Agregar tiempo de espera extra para cargar la lista de usuarios
                time.sleep(3)  # Espera 3 segundos antes de verificar si aparece el usuario

                user_select = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.ID, "addselect"))
                )
                optgroup = user_select.find_element(By.TAG_NAME, "optgroup")
                label_text = optgroup.get_attribute("label")

                if "Ning√∫n usuario coincide" in label_text:
                    logging.warning(f"‚ö†Ô∏è Usuario {correo} NO encontrado en {week_str}.")
                    tomar_screenshot(driver, f"usuario_no_encontrado_{week_str}")
                    results.append({"week": week_str, "result": "Usuario no encontrado"})
                else:
                    user_option = optgroup.find_element(By.TAG_NAME, "option")
                    user_option.click()

                    add_button = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.ID, "add"))
                    )
                    add_button.click()

                    logging.info(f"‚úÖ Usuario {correo} asignado a {week_str}.")
                    results.append({"week": week_str, "result": "Asignaci√≥n exitosa"})

            except Exception as e:
                logging.error(f"‚ùå Error en {week_str}: {e}")
                tomar_screenshot(driver, f"error_asignacion_{week_str}")
                results.append({"week": week_str, "result": f"Error: {str(e)}"})

            # üîÑ Volver a la p√°gina de "Cohortes" para la siguiente iteraci√≥n
            driver.get("https://campusvirtual.bestwork.cl/cohort/index.php")
            time.sleep(3)

        logging.info("‚úÖ Asignaci√≥n avanzada completada.")

        return {"message": "‚úÖ Asignaci√≥n avanzada completada.", "details": results}

    except Exception as e:
        logging.error(f"‚ùå Error general en la asignaci√≥n avanzada: {e}")
        tomar_screenshot(driver, "error_general_asignacion")
        return {"error": str(e)}

    finally:
        # üîπ Cerrar el WebDriver al finalizar el proceso
        logging.info("üîö Cerrando WebDriver despu√©s de completar la asignaci√≥n.")
        driver.quit()